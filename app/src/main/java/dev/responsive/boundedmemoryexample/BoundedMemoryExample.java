/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.responsive.boundedmemoryexample;

import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;
import java.util.Properties;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.utils.Bytes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Named;
import org.apache.kafka.streams.kstream.Suppressed;

public class BoundedMemoryExample {
    private static final String SOURCE_TOPIC = System.getenv()
        .getOrDefault("SOURCE_TOPIC", "source-topic");
    private static final String SINK_TOPIC = System.getenv()
        .getOrDefault("SINK_TOPIC", "sink-topic");

    private final KafkaStreams kafkaStreams;

    public BoundedMemoryExample(final Properties properties) {
        kafkaStreams = buildKafkaStreams(properties);
    }

    private KafkaStreams buildKafkaStreams(final Properties properties) {
        final StreamsBuilder builder = new StreamsBuilder();
        final KStream<Bytes, Bytes> stream = builder.stream(
            SOURCE_TOPIC,
            Consumed.with(new Serdes.BytesSerde(), new Serdes.BytesSerde())
                .withName("source")
        );
        stream.groupByKey(Grouped.as("group-by-key"))
            .count(Named.as("count-keys"))
            .suppress(Suppressed.untilTimeLimit(
                Duration.ofMinutes(5),
                Suppressed.BufferConfig.maxBytes(100 * 1024 * 1024)
                    .emitEarlyWhenFull()
            ))
            .toStream(Named.as("counts-stream"))
            .to(SINK_TOPIC);
        final var topology = builder.build();
        return new KafkaStreams(topology, properties);
    }

    private void start() {
        kafkaStreams.start();
    }

    private void shutdown() {
        kafkaStreams.close();
    }

    public static void main(String[] args) throws IOException {
        final Properties properties = new Properties();
        try (final var s = new FileInputStream(args[0])) {
            properties.load(s);
        }
        properties.put(
            StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG,
            BoundedMemoryRocksDBConfigSetter.class
        );
        final var boundedMemoryExample = new BoundedMemoryExample(properties);
        boundedMemoryExample.start();
        Runtime.getRuntime().addShutdownHook(new Thread(boundedMemoryExample::shutdown));
    }
}
